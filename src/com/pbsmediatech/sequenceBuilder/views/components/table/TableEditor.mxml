<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" >
	<s:layout>
		<s:VerticalLayout paddingLeft="3" paddingTop="3" paddingBottom="3"/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.pbsmediatech.sequenceBuilder.views.components.EnterNamePop;
			import com.pbsmediatech.code.method_builders.sql.makeCreateTableScript;
			import com.pbsmediatech.code.method_builders.sql.makeSQLAddColumnToTable;
			import com.pbsmediatech.code.method_builders.sql.makeSQLRemoveColumnFromTableScript;
			import com.pbsmediatech.code.method_builders.sql.makeSQLUpdateColumnScript;
			import com.pbsmediatech.json.utils.JSONResultHelper2;
			
			import db.MySQLRow;
			import db.field.Field;
			import db.field.IDFieldSize;
			import db.getMySQLFieldLength;
			
			import com.pbsmediatech.sequenceBuilder.views.events.FieldEvent;
			import com.pbsmediatech.sequenceBuilder.views.tasks.compareFieldToMySQLRow;
			import com.pbsmediatech.sequenceBuilder.views.tasks.convertMySQLRowToField;
			import com.pbsmediatech.sequenceBuilder.views.tasks.findFieldByName;
			import com.pbsmediatech.sequenceBuilder.views.tasks.findMySQLRowByName;
			import com.pbsmediatech.sequenceBuilder.views.tasks.getDataStoreServiceController;
			import com.pbsmediatech.sequenceBuilder.views.tasks.store.rename_column_in_store;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			import utils.date.now;
			import utils.text.newLine;
			import utils.timestamp.dateToTimestamp;
			
			[Bindable]private var num_records:String = "?";
			[Bindable]private var table_version_value:Number = 0;
			[Bindable]public var table_name:String;
			[Bindable]public var domain_label:String;
			
			[Bindable]private var status_text:String;
			[Bindable]public var can_add_to_sequence:Boolean;//true if row is not in seqeunce;
			[Bindable]public var can_update_sequence_field:Boolean;//true if field in sequence differs;
			[Bindable]public var selected_row:MySQLRow;
			[Bindable]public var selected_field:Field;
			
			
			[Bindable]private var allow_add_field_to_store:Boolean;
			[Bindable]private var allow_update_field_in_store:Boolean;
			[Bindable]private var allow_remove_field_from_store:Boolean;
			[Bindable]private var allow_create_table:Boolean;
			
			//table updates
			protected function remove_column_from_store_clickHandler(event:MouseEvent):void
			{
				showAlert("Are you positive you want to remove this column from remote store???", function():void{
				
					var sql_Text:String = makeSQLRemoveColumnFromTableScript(table_name,
					selected_row.Field);
					commit_command_to_store(sql_Text);
				});
			}
	
			protected function add_to_store_clickHandler(event:MouseEvent):void
			{
				if(selected_field == null)return;
				showAlert("Are you sure you want to add this column from remote store?", function():void{
					
					var sql_Text:String = makeSQLAddColumnToTable(table_name,
						selected_field.field_name,selected_field.field_type, selected_field.field_size, selected_field.is_last_mod, selected_field.default_value); 
					
					commit_command_to_store(sql_Text);
					allow_add_field_to_store = false;
					allow_update_field_in_store = false;
				});
				
			}
			
			
			protected function update_store_clickHandler(event:MouseEvent):void
			{
				if(selected_field == null)return;
				showAlert("Are you sure you want to update this "+selected_field.field_name+" to remote store?", function():void{
					
					var sql_Text:String = makeSQLUpdateColumnScript(table_name,
						selected_field.field_name,selected_field.field_name,selected_field.field_type, selected_field.field_size, selected_field.is_last_mod); 
					
					commit_command_to_store(sql_Text);
					allow_update_field_in_store = false;
				});
			}
			
			
			protected function remove_from_store_clickHandler(event:MouseEvent):void
			{
				if(selected_field == null)return;
				
				showAlert("Are you positive you want to remove this column to remote store???", function():void{
					
					var sql_Text:String = makeSQLRemoveColumnFromTableScript(table_name,
						selected_field.field_name);
					commit_command_to_store(sql_Text);
					allow_remove_field_from_store = false;
				});
			}
			
			private function showAlert(message:String, yesCallback:Function):void
			{
				Alert.show(message,"Data Store Change",
					Alert.YES|Alert.NO,null,function(ce:CloseEvent):void
					{
						if(ce.detail == Alert.YES)
						{
							yesCallback();
						}
					});
			}
			
			protected function commit_command_to_store(commandText:String):void
			{
				getDataStoreServiceController(domain_label, AppModel.getInstance().dev).apply_command({command:commandText}, function(evt:ResultEvent):void
				{
					if(new JSONResultHelper2().resultIsGood(extractResult(evt)))
					{
						refresh_clickHandler();
						status_text = "Table updated.";
						sql_command.text += dateToTimestamp(now())+newLine();
						sql_command.text += commandText;
					}
					else
					{
						status_text = "Unable to update table.";
					}
				});
			}
				
			//------------------table updates

			protected function add_to_sequence_clickHandler(event:MouseEvent):void
			{
				if(selected_row == null){return};
				var nf:Field = convertMySQLRowToField(selected_row);
				dispatchEvent(new FieldEvent(FieldEvent.EVENT_ADD_FIELD_TO_SEQUENCE,nf, function():void{},true));
				can_add_to_sequence = false;
			}

			protected function dg_table_rows_changeHandler(event:ListEvent):void
			{
				can_add_to_sequence = false;
				can_update_sequence_field = false;
				selected_row = dg_table_rows.selectedItem as MySQLRow;
				
				var field:Field = findFieldByName(selected_row.Field);
				if(field == null)
				{
					can_add_to_sequence = true;
				}
				else
				{
				   	can_update_sequence_field = !compareFieldToMySQLRow(field,selected_row);	
				}
				
				
				
				
			}


			protected function update_sequence_field_clickHandler(event:MouseEvent):void
			{
				if(!selected_row)return;
				var field:Field = findFieldByName(selected_row.Field);
				if(field != null){
					dispatchEvent(new FieldEvent(FieldEvent.EVENT_UPDATE_FIELD_IN_SEQUENCE,field,function():void{},true))
				can_update_sequence_field = false;
				}
			}


			

		
			import com.pbsmediatech.json.utils.extractResult;
			
			import com.pbsmediatech.sequenceBuilder.AppModel;
			protected function refresh_clickHandler(event:MouseEvent = null):void
			{
				AppModel.getInstance().datastore.fields.removeAll();
				
				getDataStoreServiceController(domain_label, AppModel.getInstance().dev).get_table_info({table_name:table_name}, function(evt:ResultEvent):void
				{
					var results:Array = new JSONResultHelper2().resultToArray(String(evt.result));
					for each (var obj:Object in results)
					{
						AppModel.getInstance().datastore.fields.addItem(new MySQLRow(obj));
					}
					dispatchEvent(new Event("EVENT_DATASTORE_TABLES_UPDATED",true));
					validateField();
					if(results.length == 0){allow_create_table = true};
				});
			}

			protected function get_table_version_clickHandler(event:MouseEvent):void
			{
				getDataStoreServiceController(domain_label, AppModel.getInstance().dev).get_table_version({table_name:table_name}, function(evt:ResultEvent):void
				{
					if(new JSONResultHelper2().resultIsGood(extractResult(evt)))
						{
					var resultObj:Object = JSON.parse(extractResult(evt));
					table_version_value = resultObj["result"];
						}
						
				});
			}


			protected function set_table_version_clickHandler(event:MouseEvent):void
			{
				getDataStoreServiceController(domain_label, AppModel.getInstance().dev).set_table_version({table_name:table_name, table_version:table_version.value}, function(evt:ResultEvent):void
				{
					if(new JSONResultHelper2().resultIsGood(extractResult(evt)))
					{
						var resultObj:Object = JSON.parse(extractResult(evt));
						status_text = resultObj["message"];
						table_version_value = table_version.value;
					}
				});
								
							
			}

	
			protected function get_num_records_clickHandler(event:MouseEvent):void
			{
				getDataStoreServiceController(domain_label, AppModel.getInstance().dev).get_number_records_in_table({table_name:table_name},function(evt:ResultEvent):void
				{
					if(new JSONResultHelper2().resultIsGood(extractResult(evt)))
					{
						var resultObj:Object = JSON.parse(extractResult(evt));
						num_records = resultObj["result"];
					}
				});
									
			}
	
	
		
			

			public function validateField():void
			{
				allow_add_field_to_store = false;
				allow_update_field_in_store = false;
				allow_remove_field_from_store = false;
				if(selected_field != null)
				{
				var matching_row:MySQLRow = findMySQLRowByName(selected_field.field_name);
				allow_add_field_to_store = matching_row == null;
				allow_remove_field_from_store = !allow_add_field_to_store;
				if(matching_row)
				{
				allow_update_field_in_store = !compareFieldToMySQLRow(selected_field,matching_row); 
				}
				}
				
			}
			


			protected function sequence_fields_changeHandler(event:IndexChangeEvent):void
			{
				selected_field = sequence_fields.selectedItem as Field;
				validateField();
			}


			protected function create_table_clickHandler(event:MouseEvent):void
			{
				var namePop:EnterNamePop= new EnterNamePop;
				PopUpManager.addPopUp(namePop, this, true);
				PopUpManager.centerPopUp(namePop);
				namePop.title = "Enter Key Name.";
				namePop.minLength = AppModel.getInstance().MIN_TABLE_NAME_LENGTH;
				namePop.happy = function(name:String):void
				{
					var sql:String = makeCreateTableScript(table_name, name);
					commit_command_to_store(sql);
					var field:Field = new Field;
					field.is_ID = true;
					field.field_name = name;
					field.field_type = Field.BIGINT;
					field.field_size = IDFieldSize();
					
					dispatchEvent(new FieldEvent(FieldEvent.EVENT_ADD_FIELD_TO_SEQUENCE, field, 
						function():void{"EVENT_ADD_FIELD_TO_SEQUENCE - Callback"},true));
					PopUpManager.removePopUp(namePop);
					allow_create_table = false;
				}
				namePop.addEventListener(CloseEvent.CLOSE, function(ce:CloseEvent):void
				{
					PopUpManager.removePopUp(namePop);
				});
			}


			protected function rename_column_in_store_clickHandler(event:MouseEvent):void
			{
				com.pbsmediatech.sequenceBuilder.views.tasks.store.rename_column_in_store(this, selected_row, table_name, commit_command_to_store);
			}

		]]>
	</fx:Script>
	<s:HGroup width="100%" >
	<s:HGroup width="100%">
		<s:Button label="Refresh" id="refresh" enabled="{table_name.length &gt; 0}" click="refresh_clickHandler(event)"/>
	</s:HGroup>
	<s:HGroup width="100%">
		<s:Button label="get_num_records" toolTip="Get Number of Records" id="get_num_records" click="get_num_records_clickHandler(event)" />
		<s:Label width="50" text="{num_records}" height="100%" verticalAlign="middle"/>
	</s:HGroup>
	<s:HGroup width="100%">
		<s:Button label="get_table_version" toolTip="Get Current Table Version" id="get_table_version" click="get_table_version_clickHandler(event)" />
		<s:NumericStepper value="{table_version_value}" id="table_version"  maximum="99" minimum="0" stepSize="0.01"/>
		<s:Button label="set_table_version" toolTip="Set table to version" id="set_table_version" click="set_table_version_clickHandler(event)" />
		<s:Button visible="{table_name.length &gt; 3 &amp;&amp; allow_create_table}" includeInLayout="{table_name != '' &amp;&amp; allow_create_table}" label="Create Table" toolTip="Create New Table" id="create_table" click="create_table_clickHandler(event)" />
	</s:HGroup>
	</s:HGroup>
	<mx:HRule width="100%"/>
	<s:HGroup width="100%" paddingLeft="2" paddingRight="2">
		<s:HGroup width="100%" horizontalAlign="left">
			<s:Button id="remove_column_from_store" enabled="{dg_table_rows.selectedItem != null}" label="Remove Column" click="remove_column_from_store_clickHandler(event)"/>
			<s:Button id="rename_column_in_store" enabled="{dg_table_rows.selectedItem != null}" label="Rename Column" click="rename_column_in_store_clickHandler(event)"/>
		</s:HGroup>	
		<s:HGroup width="100%" horizontalAlign="right">
			<s:Button id="update_sequence_field" enabled="{can_update_sequence_field}" label="Update Sequence Field" click="update_sequence_field_clickHandler(event)"/>
			<s:Button id="add_to_sequence" enabled="{can_add_to_sequence}" label="Add to Field to Sequence" click="add_to_sequence_clickHandler(event)"/>
		</s:HGroup>	
	</s:HGroup>	
	<mx:DataGrid width="100%" height="100%" change="dg_table_rows_changeHandler(event)" id="dg_table_rows" dataProvider="{AppModel.getInstance().datastore.fields}">
		<mx:columns>
			<mx:DataGridColumn dataField="Field" width="280"/>
			<mx:DataGridColumn dataField="Type" width="100"/>
			<mx:DataGridColumn dataField="Null" width="50"/>
			<mx:DataGridColumn dataField="Key" width="50"/>
			<mx:DataGridColumn dataField="Default" width="100"/>
			<mx:DataGridColumn dataField="Extra" width="100"/>
		</mx:columns>
	</mx:DataGrid>
<mx:HRule width="100%"/>
    
	<s:VGroup width="100%">
		<s:HGroup width="100%" paddingLeft="2" paddingRight="2">
        		<s:HGroup width="100%" horizontalAlign="left">
					<s:VGroup width="100%" height="100%">
						
        		<s:Label fontWeight="bold" width="200" text="Sequence Field"/>	
					<s:DropDownList dataProvider="{AppModel.getInstance().fields}" labelField="field_name" id="sequence_fields" selectedItem="{selected_field}" change="sequence_fields_changeHandler(event)" width="239"/>
					</s:VGroup>
        		</s:HGroup>	
        		<s:HGroup width="100%" height="100%" verticalAlign="bottom" horizontalAlign="right">
        		<s:Button label="Add Field to Store" enabled="{allow_add_field_to_store}" id="add_to_store" click="add_to_store_clickHandler(event)"/>	
        		<s:Button label="Update Field in Store" enabled="{allow_update_field_in_store}" id="update_store" click="update_store_clickHandler(event)"/>	
        		<s:Button label="Remove Field  from Store" enabled="{allow_remove_field_from_store}" id="remove_from_store" click="remove_from_store_clickHandler(event)"/>	
        		</s:HGroup>	
        	</s:HGroup>	
        
		
		<s:TextArea id="sql_command" width="100%" height="79"/>
	
	<s:HGroup width="100%" paddingLeft="2" paddingRight="2">
    		<s:HGroup width="100%" horizontalAlign="left">
		<s:Label width="100%" id="status" text="{status_text}"/>
    			
    		
    		</s:HGroup>	
    	</s:HGroup>	
    </s:VGroup>
</s:TitleWindow>
