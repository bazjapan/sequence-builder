<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="true" width="100%" xmlns:components="jp.unchained.views.components.*" creationComplete="cc()" xmlns:image="image.*" xmlns:components1="com.pbsmediatech.sequenceBuilder.views.components.*">
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="selected"/>
	</s:states>
	<fx:Script>
	
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.maccherone.json.JSON;
			import com.pbsmediatech.json.utils.JSONResultHelper2;
			import com.pbsmediatech.json.utils.extractResult;
			import com.pbsmediatech.sequenceBuilder.AppModel;
			import com.pbsmediatech.sequenceBuilder.assets.IconLib;
			import com.pbsmediatech.sequenceBuilder.views.components.NoteTaker2;
			import com.pbsmediatech.sequenceBuilder.views.components.field.custom.CustomFieldSetter;
			import com.pbsmediatech.sequenceBuilder.views.components.field.nested.NestedFieldList;
			import com.pbsmediatech.sequenceBuilder.views.components.field.options.OptionSetter;
			import com.pbsmediatech.sequenceBuilder.views.components.field.type.FieldTypeChanger;
			import com.pbsmediatech.sequenceBuilder.views.events.FieldEvent;
			import com.pbsmediatech.sequenceBuilder.views.tasks.compareFieldToMySQLRow;
			import com.pbsmediatech.sequenceBuilder.views.tasks.field.set_field_default_value;
			import com.pbsmediatech.sequenceBuilder.views.tasks.field.set_field_validation;
			import com.pbsmediatech.sequenceBuilder.views.tasks.fieldHasVariableLengthProperty;
			import com.pbsmediatech.sequenceBuilder.views.tasks.getDataStoreServiceController;
			
			import db.Datastore;
			import db.MySQLRow;
			import db.field.Field;
			import db.field.IDFieldSize;
			import db.field.custom.get_custom_type_length;
			import db.field.get_base_type_by_name;
			import db.field.get_field_type_by_name;
			import db.field.options.field_has_custom_options;
			import db.field.rules.can_add_custom_type;
			import db.field.types.isComplexType;
			
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.TitleWindow;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import utils.events.CallbackEvent;
			import utils.object.isEmpty;
			import utils.object.isNull;
			import utils.string.replace;

			[Bindable]private var allow_add_to_store:Boolean = true;
			[Bindable]private var allow_update_store:Boolean = true;
			[Bindable]private var allow_table_edits:Boolean = true;
			
			[Bindable]private var connection_broken:Boolean;//lets user know if fk connection has a problem
			
			[Bindable]public var field:Field;
			//private var associatedRow:MySQLRow;
			override public function set data(value:Object):void
			{
				field = value as Field;
				
				if(field != null)
				{
					update_field_icon();
					update_custom_icon();
					
				}
				
			}
			private function cc():void
			{
			
			}
			




			protected function updateable_clickHandler(event:MouseEvent):void
			{
				field.updateable = !field.updateable;
				// TODO Auto-generated method stub
			}


			protected function can_search_by_clickHandler(event:MouseEvent):void
			{
				field.can_search_by = !field.can_search_by;
				// TODO Auto-generated method stub
			}
			protected function is_required_clickHandler(event:MouseEvent):void
			{
				field.is_required = !field.is_required;
				// TODO Auto-generated method stub
			}


			protected function can_update_by_clickHandler(event:MouseEvent):void
			{
				field.can_update_by = !field.can_update_by;
				// TODO Auto-generated method stub
			}


			protected function can_remove_by_clickHandler(event:MouseEvent):void
			{
				field.can_remove_by = !field.can_remove_by;
				// TODO Auto-generated method stub
			}
			protected function is_index_clickHandler(event:MouseEvent):void
			{
				field.is_index = !field.is_index;
				// TODO Auto-generated method stub
			}
			protected function field_is_unique_clickHandler(event:MouseEvent):void
			{
				field.is_unique = !field.is_unique;
				// TODO Auto-generated method stub
			}


			

			protected function field_name_changeHandler(event:TextOperationEvent):void
			{
				field.field_name = field_name.text;
				
			}


			
			
			//store functions
			protected function add_to_store_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event("EVENT_ADD_FIELD_TO_STORE", true));
			}


			protected function update_store_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				dispatchEvent(new Event("EVENT_UPDATE_FIELD_IN_STORE", true));
			}


			protected function open_field_in_store_click_handler(event:MouseEvent):void
			{
				dispatchEvent(new Event("EVENT_OPEN_FIELD_IN_STORE", true));
				// TODO Auto-generated method stub
			}

			//------------------------
			protected function trash_field_clickHandler(event:MouseEvent):void
			{
				if(field.is_nc){return}
				dispatchEvent(new Event("TRASH_FIELD", true));
			}

			


			protected function field_note_clickHandler(event:MouseEvent):void
			{
				
				var noteTaker:NoteTaker2 = new NoteTaker2;
				noteTaker.width = 300;
				noteTaker.height = 200;
				noteTaker.text = field.field_note;
				noteTaker.title = field.field_name;
				PopUpManager.addPopUp(noteTaker,Application.application as DisplayObject,true);
				PopUpManager.centerPopUp(noteTaker);
				noteTaker.addEventListener(CloseEvent.CLOSE, function(ce:CloseEvent):void
				{
					field.field_note = noteTaker.text;
					PopUpManager.removePopUp(noteTaker);
				})
			}
			protected function is_ID_clickHandler(event:MouseEvent):void
			{
				var setToTrue:Boolean = !field.is_ID;
				if(setToTrue)
				{
					dispatchEvent(new CallbackEvent("EVENT_CHECK_ONLY_ID_FIELD", function(onlyOne:Boolean):void
					{
						if(onlyOne)
						{
							field.is_ID = true;
							field.is_FK = false;
						}
						else
						{
							field.is_ID = false;
						}
					},true))
				}
				else
				{
					field.is_ID = false;
				}
		
			}
			protected function is_FK_clickHandler(event:MouseEvent):void
			{
				if(field.is_ID){field.is_FK = false; field.fk_target = '';   return};
				if(field.is_FK)
				{
					field.is_FK = false;
					field.fk_target = '';
				}
				else
				{
				dispatchEvent(new FieldEvent(FieldEvent.EVENT_SHOW_FOREIGN_KEYS_FOR_FIELD,field,null,true));
				}
			}



			


		
			//default
			protected function field_default_value_clickHandler(event:MouseEvent):void
			{
				
				set_field_default_value(field, this.parent, function(field:Field):void{
					
					
				})
			}
			protected function field_validation_clickHandler(event:MouseEvent):void
			{
				
				set_field_validation(field, this.parent, function(field:Field):void{
					
					
				})
				
			}
			protected function field_prompt_clickHandler(event:MouseEvent):void
			{
				
				var noteTaker:NoteTaker2 = new NoteTaker2;
				noteTaker.width = 300;
				noteTaker.height = 200;
				noteTaker.text = field.prompt;
				noteTaker.title = "Prompt for "+field.field_name;
				PopUpManager.addPopUp(noteTaker,Application.application as DisplayObject,true);
				PopUpManager.centerPopUp(noteTaker);
				noteTaker.addEventListener(CloseEvent.CLOSE, function(ce:CloseEvent):void
				{
					field.prompt = noteTaker.text;
					PopUpManager.removePopUp(noteTaker);
					
					
				})
			}
			
			private var nestedFieldEditor:TitleWindow
			private var nfl:NestedFieldList; 
			protected function show_nested_field_editor():void
			{
				
				if(!nestedFieldEditor){
					nfl = new NestedFieldList();
					
					nestedFieldEditor = new TitleWindow();
					nestedFieldEditor.addElement(nfl);
					nfl.saveFunc = function(fields:ArrayCollection):void{
						field.json_labels = fields.source;
						//field_json_labels.faded = isEmpty(field.json_labels);
						close();
					}
					nfl.cancelFunc = function():void{
						close();
					}
					nestedFieldEditor.addEventListener(CloseEvent.CLOSE, function(ce:CloseEvent):void
					{
						close()
					});
					nestedFieldEditor.height = 400;
				}
				
				function close():void{
					PopUpManager.removePopUp(nestedFieldEditor);
				}
					
				nestedFieldEditor.title = "Nested fields for "+field.field_name;
					
				nfl.set_parent_field(field);
				nfl.fields = new ArrayCollection(field.json_labels);
				
				PopUpManager.addPopUp(nestedFieldEditor,Application.application as DisplayObject,true);
				PopUpManager.centerPopUp(nestedFieldEditor);
					
			
			}
			

			[Bindable]
			private var showNicename:Boolean = false;
			protected function btn_toggle_nicename_clickHandler(event:MouseEvent):void
			{
				showNicename = !showNicename;
			}


			protected function nicename_changeHandler(event:TextOperationEvent):void
			{
				field.nicename = nicename.text;
			}


			private var fosWindow:TitleWindow
			private var fos:OptionSetter
			protected function field_options_clickHandler(event:MouseEvent):void
			{
				var fi:FadedImage = event.currentTarget as FadedImage;
				if(!fosWindow){
					fos = new OptionSetter();
					fosWindow = new TitleWindow();
					fosWindow.addElement(fos);
					fos.save_func = function():void{
						close();
						fi.faded = isEmpty(field.options);
					}
					fos.cancel_func = function():void{
						close();
					}
					fosWindow.addEventListener(CloseEvent.CLOSE, function(ce:CloseEvent):void
					{
						close()
					});
				}
				
				function close():void{
					PopUpManager.removePopUp(fosWindow);
				}
				
				fosWindow.title = "Options for  "+field.field_name;
				
				
				fos.set_field(field)
				PopUpManager.addPopUp(fosWindow,Application.application as DisplayObject,true);
				PopUpManager.centerPopUp(fosWindow);
				
				
			}

			var ftcWindow:TitleWindow;
			var ftc:FieldTypeChanger;
			protected function field_icon_clickHandler(event:MouseEvent):void
			{
				if(isComplexType(field.field_type)){
					show_nested_field_editor();
					return;
				}
				if(!ftcWindow){
					ftc = new FieldTypeChanger();
					ftcWindow = new TitleWindow();
					ftcWindow.addElement(ftc);
					ftc.save_func = function():void{
						close();
						field.field_type = ftc.get_selected_type();
						field.custom = ftc.get_custom_type();
						field.field_size = ftc.get_field_size();
					}
					ftc.cancel_func = function():void{
						close();
					}
					ftcWindow.addEventListener(CloseEvent.CLOSE, function(ce:CloseEvent):void
					{
						close()
					});
				}
				
				function close():void{
					PopUpManager.removePopUp(ftcWindow);
				}
				
				ftcWindow.title = "Field Type for  "+field.field_name;
				
				
				ftc.set_field(field)
				PopUpManager.addPopUp(ftcWindow,Application.application as DisplayObject,true);
				PopUpManager.centerPopUp(ftcWindow);

			}
			[Bindable]
			private var field_icon:Class;
			private function update_field_icon():void
			{
				if(field.field_type == "id"){
					field_icon = IconLib["IC_FIELD_id"]
					
				}else{
				var icon_type:String = field.field_type;
				var field_type:Object = get_field_type_by_name(icon_type);
				var icon_str:String = field_type?field_type.icon:isComplexType(field.field_type)?'json':'text';
				var icon:Class = IconLib["IC_FIELD_"+icon_str];
				if(isNull(icon)){
					if(isComplexType(field.field_type)){
						icon = IconLib["IC_FIELD_json"];
					}else{
						icon = IconLib["IC_FIELD_text"];
					}
				}
				field_icon = icon;
				}
			}
			
			[Bindable]
			private var custom_icon:Class;
			private function update_custom_icon():void
			{
					custom_icon = null
					if(isNull(field.custom)){return}
					var icon_type:String = field.custom;
					var field_type:Object = get_field_type_by_name(icon_type);
					var icon_str:String = field_type?field_type.icon:isComplexType(field.field_type)?'json':'text';
					var icon:Class = IconLib["IC_FIELD_"+icon_str];
					
					custom_icon = icon;
				
			}
		

		]]>
	</fx:Script>
	
	<s:BorderContainer width="100%" height="40" backgroundColor.selected="#E1E1E1">
		<s:HGroup width="100%" height="100%" paddingRight="5" paddingLeft="5">
			
			
			
			<s:VGroup height="100%" verticalAlign="middle" horizontalAlign="center">
				<mx:Image width="16" height="16" buttonMode="true" source="{field.is_nc?IconLib.LOCK24:IconLib.TRASH_24}" toolTip="{field.is_nc?'Field is Locked':'Remove Field'}" id="trash_field" click="trash_field_clickHandler(event)" alpha="{field.is_nc?0.5:1}"/>
			</s:VGroup>
			<mx:VRule height="35"/>
			<s:VGroup  height="100%" verticalAlign="middle" horizontalAlign="center">
				<mx:Image  buttonMode="true" source="{IconLib.NOTE_24}" id="field_note" toolTip="Edit Field Note" click="field_note_clickHandler(event)"  alpha="{field.field_note!=null?1:0.5}"/>
			</s:VGroup>
			
			
			<s:VGroup height="100%" verticalAlign="middle" horizontalAlign="center">
			<image:FadedImage fadeAlpha="0.3" width="16" height="16" buttonMode="true" source="{isEmpty(field.nicename)?IconLib.FIELD_NICENAME:IconLib.FIELD_NICENAME_GOOD}" id="btn_toggle_nicename" toolTip="{isEmpty(field.nicename)?'Click to edit Field Nicename':field.nicename}" click="btn_toggle_nicename_clickHandler(event)"  faded="{showNicename}"/>
			</s:VGroup>
			
			<s:VGroup height="100%" id="vb_name_toggle" verticalAlign="middle">
				<s:TextInput visible="{!showNicename}" includeInLayout="{!showNicename}" id="field_name" fontWeight="bold" text="{field.field_name}" maxChars="40" width="200" change="field_name_changeHandler(event)"/>
				<s:TextInput visible="{showNicename}" includeInLayout="{showNicename}" id="nicename" fontWeight="bold" text="{field.nicename}" maxChars="40" width="200" change="nicename_changeHandler(event)"/>
			</s:VGroup>
			
			<s:HGroup height="100%" verticalAlign="middle" minWidth="100">	
				<s:HGroup>
					<mx:Image source="{field_icon}" toolTip="{field.field_type}"  width="24" height="24" buttonMode="true" id="img_field_icon" click="field_icon_clickHandler(event)"/>
				</s:HGroup>
				<s:HGroup visible="{!isNull(field.custom)}" includeInLayout="{!isNull(field.custom)}">
					<mx:Image buttonMode="true" source="{custom_icon}" toolTip="{field.custom}"  width="24" height="24" id="img_custom_icon" click="field_icon_clickHandler(event)"/>
				</s:HGroup>
				<s:HGroup>
					<image:FadedImage fadeAlpha="0.3" width="24" height="24" buttonMode="true" source="{IconLib.FIELD_PROMPT_24}" id="field_prompt" toolTip="Edit Field Prompt" click="field_prompt_clickHandler(event)" faded="{isNull(field.prompt)}" visible="{!field.is_ID &amp;&amp; !field.is_FK &amp;&amp; field.is_insert_date == false &amp;&amp; field.is_last_mod == false}"/>
				</s:HGroup>
				<s:HGroup includeInLayout="{field_has_custom_options(field.field_type)}" visible="{field_has_custom_options(field.field_type)}">
					<image:FadedImage fadeAlpha="0.3" width="24" height="24" buttonMode="true" source="{IconLib.FIELD_SETTINGS24}" id="field_options" toolTip="Edit Field Options" click="field_options_clickHandler(event)" faded="{isEmpty(field.options)}"/>
				</s:HGroup>	
			
				
			</s:HGroup>
			
	
			<mx:VRule height="35"/>
			
			<!--methods-->
			<s:VGroup  height="100%" verticalAlign="middle" horizontalAlign="center">
			<s:HGroup>
				<mx:Image  visible="{!field.is_ID &amp;&amp; field.is_insert_date == false &amp;&amp; field.is_last_mod == false}" width="24" height="24" buttonMode="true" source="{IconLib.UPDATEABLE_24}" toolTip="Field is updateable" id="updateable" click="updateable_clickHandler(event)" alpha="{field.updateable?1:0.3}"/>
				<mx:Image width="24" height="24" buttonMode="true" source="{IconLib.DB_SEARCH_24}" toolTip="Can Search by" id="can_search_by" click="can_search_by_clickHandler(event)" alpha="{field.can_search_by?1:0.3}"/>
				<mx:Image width="24" height="24" buttonMode="true" source="{IconLib.DB_UPDATE_24}" toolTip="Can update by" id="can_update_by" click="can_update_by_clickHandler(event)" alpha="{field.can_update_by?1:0.3}"/>
				<mx:Image enabled="{!field.is_ID}" width="24" height="24" buttonMode="true" source="{IconLib.DB_REMOVE_24}" toolTip="Can remove by" id="can_remove_by" click="can_remove_by_clickHandler(event)" alpha="{field.can_remove_by?1:0.3}"/>
				<mx:Image enabled="{!field.is_ID}" width="24" height="24" buttonMode="true" source="{IconLib.FIELD_IS_INDEX_24}" toolTip="Is Indexed" id="is_index" click="is_index_clickHandler(event)" alpha="{field.is_index?1:0.3}"/>
			</s:HGroup>
			</s:VGroup>
			<!--/methods-->
			
			<s:VGroup width="25" height="100%" verticalAlign="middle" horizontalAlign="center">
				<mx:VRule height="35"/>
			</s:VGroup>
			<s:VGroup  height="100%" verticalAlign="middle" horizontalAlign="center">
				
				<s:HGroup>
					<mx:Image width="24" height="24" buttonMode="true" source="{IconLib.FIELD_REQUIRED_24}" toolTip="Is Required" id="is_required" click="is_required_clickHandler(event)" alpha="{field.is_required?1:0.3}" enabled="{!field.is_ID}"/>
					<image:FadedImage fadeAlpha="0.3" width="24" height="24" buttonMode="true" source="{IconLib.FIELD_DEFAULT_24}" id="field_default_value" toolTip="Edit Field Default Value" click="field_default_value_clickHandler(event)" faded="{isNull(field.default_value)|| isEmpty(field.default_value)}" visible="{!field.is_ID &amp;&amp; field.is_insert_date == false &amp;&amp; field.is_last_mod == false}" />
					<image:FadedImage fadeAlpha="0.3" width="24" height="24" buttonMode="true" source="{IconLib.FIELD_VALIDATION_24}" id="field_validation" toolTip="Edit Field Validation" click="field_validation_clickHandler(event)" faded="{isNull(field.validation)|| isEmpty(field.validation)}" visible="{!field.is_ID &amp;&amp; !field.is_FK &amp;&amp; field.is_insert_date == false &amp;&amp; field.is_last_mod == false}"/>
					<image:FadedImage fadeAlpha="0.3" width="24" height="24" buttonMode="true" source="{IconLib.FIELD_IS_UNIQUE_24}" id="field_is_unique" toolTip="Field is Unique" click="field_is_unique_clickHandler(event)" faded="{!field.is_unique}" visible="{!field.is_ID &amp;&amp; !field.is_FK &amp;&amp; field.is_insert_date == false &amp;&amp; field.is_last_mod == false}"/>
				</s:HGroup>
				
				
			</s:VGroup>
			<s:VGroup width="25" height="100%" verticalAlign="middle" horizontalAlign="center">
				<mx:VRule height="35"/>
			</s:VGroup>

			
		</s:HGroup>
	</s:BorderContainer>
	
</s:ItemRenderer>
