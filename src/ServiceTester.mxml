<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" creationComplete="application1_creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			import com.pbsmediatech.dto.ControllerSequence;
			import com.pbsmediatech.dto.Domain;
			import com.pbsmediatech.json.controllers.DataStoreServiceController;
			import com.pbsmediatech.json.controllers.DomainController;
			import com.pbsmediatech.json.utils.DomainResultHelper;
			import com.pbsmediatech.json.utils.JSONResultHelper2;
			import com.pbsmediatech.json.utils.extractResult;
			
			import com.pbsmediatech.sequenceBuilder.AppModel;
			import com.pbsmediatech.sequenceBuilder.views.tasks.getDataStoreServiceController;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			import utils.object.getKeys;
			
			
			//private var data_store_services:DataStoreServiceController = new DataStoreServiceController(ServiceEndpoints.PBS_PRODUCTION);
			
			protected function get_table_prefix_clickHandler(event:MouseEvent):void
			{
				if(selected_domain == null)return;
				getDataStoreServiceController(selected_domain.domain_label, false).get_table_prefix({},function(evt:ResultEvent):void
				{
					ta_results.text += extractResult(evt).toString();	
				});
			}

			protected function get_table_version_clickHandler(event:MouseEvent):void
			{
				if(selected_domain == null)return;
				getDataStoreServiceController(selected_domain.domain_label, false).get_table_version({table_name:the_table_names.selectedItem}, function(evt:ResultEvent):void
				{
					ta_results.text += extractResult(evt).toString();
				});
			}

			[Bindable]private var table_names_data:ArrayCollection;
			protected function show_tables_func():void
			{
				if(selected_domain == null)return;
				getDataStoreServiceController(selected_domain.domain_label, false).show_tables({},function(evt:ResultEvent):void
				{
					ta_results.text += extractResult(evt).toString();	
					
					var results:Array = new JSONResultHelper2().resultToArray(extractResult(evt));
					
					var table_names:Array = [];
					
					for each (var obj:Object in results)
					{
						var keys:Array = utils.object.getKeys(obj);
						var key:String = keys[0];
						table_names.push(obj[key])
						
					}
					 
					table_names_data = new ArrayCollection(table_names);
				});
			}


			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				new DomainController(AppModel.getInstance().service_base_url).get_all_domains(function(evt:ResultEvent):void
				{
					var results:Array = new DomainResultHelper().resultToArray(extractResult(evt));
					AppModel.getInstance().domains.source = results;
				});
			}

			private var selected_domain:Domain;
			protected function dropdownlist1_changeHandler(event:IndexChangeEvent):void
			{
				selected_domain = DropDownList(event.currentTarget).selectedItem as Domain;
				
				show_tables_func();
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<s:HGroup width="100%">
		<s:DropDownList dataProvider="{AppModel.getInstance().domains}" labelField="domain_label" requireSelection="true" change="dropdownlist1_changeHandler(event)"/>
		<s:Button id="get_table_prefix" label="get_table_prefix" click="get_table_prefix_clickHandler(event)"/>
		<s:DropDownList id="the_table_names" width="300" dataProvider="{table_names_data}" requireSelection="true" />
		<s:Button id="get_table_version" label="get_table_version" click="get_table_version_clickHandler(event)"/>
	</s:HGroup>
	<s:TextArea id="ta_results" width="100%" height="100%">
		
	</s:TextArea>
</s:Application>
