<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" creationComplete="application1_creationCompleteHandler(event)" xmlns:components="jp.unchained.views.components.*" xmlns:components1="com.pbsmediatech.sequenceBuilder.views.components.*">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
		
			import com.pbsmediatech.json.utils.extractResult;
			import com.pbsmediatech.json.utils.extractResultMessage;
			import com.pbsmediatech.json.utils.extractResultResult;
			import com.pbsmediatech.json.utils.resultIsGood;
			
			import com.pbsmediatech.sequenceBuilder.views.tasks.getDataStoreServiceController;
			import com.pbsmediatech.sequenceBuilder.views.tasks.saveFile;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import utils.string.encodePluses;
			import utils.string.removeWhiteSpace;
			import utils.string.replace;
			import utils.string.xtrim;
			import utils.string.ytrim;
			
			
			
			

			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				
			}
			[Bindable]
			private var scripts:Array = [];
			private var urls:Array =  ["http://code.jquery.com/jquery-1.6.4.min.js","http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js","http://pbsmediatech.com/code/libs/underscore/underscore-1.1.7.min.js","http://pbsmediatech.com/code/libs/backbone/backbone-0.5.3.min.js"]
			public function doIt():void{
				
					
					//var urls:Array =  ["http://code.jquery.com/mobile/1.0/jquery.mobile.structure-1.0.min.css"]
					
					
					var i:int = 0;
					
					function loadNext():void
					{
						if(i<urls.length){
						load(urls[i], function(data:*):void{
							i++;
							scripts.push(data);
							loadNext();
						});
						}else{
							trace("Done!")
							btn_dl.enabled = true;
							btn_ul.enabled = true;
						}
					}
					
					
					function load(url:String, callback:Function):void
					{
						var request:URLRequest = new URLRequest(url);	
						request.contentType = "application/x-javascript";
						request.method = URLRequestMethod.POST;
						var loader:URLLoader = new URLLoader();
						loader.addEventListener(Event.COMPLETE, function(evt:Event):void{
							trace(loader.bytesTotal);
							callback(loader.data);
						});
						try
						{
							loader.load(request);
						}
						catch (error:ArgumentError)
						{
							Alert.show("An ArgumentError has occurred.");
						}
						catch (error:SecurityError)
						{
							Alert.show("A SecurityError has occurred.");
						}
					}
					
					loadNext();
					
			}
				private function downloadIt():void{
					saveFile(scripts.join(""), "libs.js");
				}
			private function uploadIt():void{
				
					var user_js:String = "/*! User_js*/"+ytrim(ta_js.text);
					scripts.push(user_js)
				
					var controller_folder:String = "testing/";
					var domain_label:String = "com.pbsmediatech";
					var content:String = scripts.join("");
					var controller_name:String = "libs";
					var domain_code_root:String = "/code/"+controller_folder;
					
					//content = removeWhiteSpace(content);
					
					var escaped:String = encodePluses(escape(content));
					getDataStoreServiceController(domain_label,
						false).deploy_js_controller({controller_name:controller_name,
							controller_content:escaped, domain_code_root:domain_code_root},function(evt:ResultEvent):void
							{
								if(resultIsGood(evt))
								{
									var returnedMessage:String = extractResultMessage(evt);
									trace(returnedMessage)
									Alert.show(extractResultResult(evt).toString())
								}
								else
								{
									Alert.show("Unable to deploy controller");
								}
							}); 
				
			}
			
		
			
			private function test():void{
				var user_js:String = "/*! User_js*/"+ytrim(ta_js.text);
				trace(user_js);
			
			}
			private function refresh():void
			{
				scripts = [];
				
			}
			private function setMe():void{
				jdg.jsonArray = '[{"type":"Exhibition","num":"1","name":"current"},{"type":"User","num":"1","name":"current"}]'
			}
			
			private function saveMe():void
			{
				
				trace(jdg.jsonArray);
			}

			
			private function googleClosure():void{
				
				var http:HTTPService = new HTTPService();
				var result = http.addEventListener(ResultEvent.RESULT,function(evt:ResultEvent):void{
					
					ta_result.text = JSON.parse(extractResult(evt))["compiledCode"];
					
				});
				
				
				http.url = "http://closure-compiler.appspot.com/compile";
				http.method = "POST";
				
				var vo:Object = new Object();
				vo.js_code = ta_js.text;
				vo.compilation_level = "SIMPLE_OPTIMIZATIONS";
				vo.output_format = "json";
				vo.output_info= ["compiled_code", "warnings", "errors", "statistics"];
				vo.compilation_level="SIMPLE_OPTIMIZATIONS"
				vo.warning_level="default";
				vo.output_file_name="default.js"
					
				http.send(vo);
				
				
				
			}
		]]>
	</fx:Script>
	<s:Button click="doIt()" label="Do It!"/>
	<s:Button id="btn_dl" click="downloadIt()" label="Download!" enabled="false"/>
	<s:Button id="btn_ul" click="uploadIt()" label="Upload!" enabled="false"/>
	<s:Button id="btn_t" click="test()" label="Test"/>
	<s:Button id="btn_r" click="refresh()" label="Start Again"/>
	<s:Button id="btn_s" click="setMe()" label="Set"/>
	<s:Button id="btn_sa" click="saveMe()" label="SaveMe"/>
	<s:Button id="btn_gc" click="googleClosure()" label="googleClosure"/>
	<s:HGroup width="100%" height="100%">
		
	<s:TextArea width="648" height="150" id="ta_js">
	
	</s:TextArea>
	<s:TextArea width="648" height="150" id="ta_result">
		
	</s:TextArea>
	</s:HGroup>
	
	
	<components1:JSONArrayGrid id="jdg"  width="100%" height="100%">
		
	</components1:JSONArrayGrid>
	
	
	
</s:Application>
